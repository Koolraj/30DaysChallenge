DAY 1

*** TIME & SPACE COMPLEXITY ***

TIME COMPLEXITY - Time complexity of an algorithm quantifies the amount of time taken
                  by an algorithm to run as a function of the length of the input. 
                  
Types of notations
1. O-notation: It is used to denote asymptotic upper bound.
For a given function g(n), we denote it by O(g(n)). Pronounced as “big-oh of g of n”.
It also known as worst case time complexity as it denotes the upper bound in which algorithm terminates.
2. Ω-notation: It is used to denote asymptotic lower bound.
For a given function g(n), we denote it by Ω(g(n)). Pronounced as “big-omega of
g of n”. It also known as best case time complexity as it denotes the lower bound in which algorithm terminates.
3. Θ-notation: It is used to denote the average time of a program.

Q1)
  int n,a=0;
  cin>>n;
  for(int i=0;i<=n;i++){a+=1;}
  
  Linear TC i.e. O(n)
  
Q2)
  int n,a=0;
  cin>>n;
  for(int i=0;i<=n;i++){
    for(int j=0;j<=n;j++){a+=1;}}
    
  Quadratic TC i.e. O(n2)
    
Q3)
  int n,m,a=0;
  cin>>n>>m;
  for(int i=0;i<=n;i++){a+=1;}
  for(int j=0;j<=m;j++){a+=1;}
  
  TC = O(n+m)
  
Q4)
  int n,m,a=0;
  cin>>n>>m;
  for(int i=0;i<=n;i++){a+=1;{
    for(int j=0;j<=m;j++){a+=1;}}
  
  TC = O(n*m)
  
Q5)
  int n,a=0;
  cin>>n;
  int i = n;
  while(i>=1){
    a+=1;
    i/=2;}
    
    TC = O(log(n))
  
Q6)
  int a=0;
  for( int i = n; i > 0; i /= 2 ) {                          //logn
    for( int j = 1; j < n; j *= 2 ) {                        //logn
      for( int k = 0; k < n; k += 2 ){a+=1;}}}               //n
  
  TC = O(n(logn)2)
 
Q7)
  int sum=0;
  for ( i=1; i < n; i *= 2 ) {                                //logn
    for ( j = n; j > 0; j /= 2 ) {                            //logn
      for ( k = j; k < n; k += 2 ){sum += (i + j * k );}}}    //n
      
  TC = O(n(logn)2)
  
Q8)
  int c=0;
  for( int i = n; i > 0; i-- ) {                               //n
    for( int j = 1; j < n; j *= 2 ) {                          //logn
      for( int k = 0; k < j; k++ ) { c+=1;}}}                  //n
      
   TC = O(n2)
   
Q9)
  int a=0;int b=0;
  for( int bound = 1; bound <= n; bound *= 2 ) {               //logn
    for( int i = 0; i < bound; i++ ) {                         //n
      for( int j = 0; j < n; j += 2 ) {a+=1;}}}                //n     }n
  for( int j = 1; j < n; j *= 2 ) {b+=1;}                      //logn
  
  TC = O(n2(logn)) or O(n2) both are correct
 
  
Q10)
  int myTest( int n ) { if ( n <= 0 ) return 0;
  else { int i = random( n - 1 );
  return myTest( i ) + myTest( n - 1 - i );}}
  
  TC = O(n)
----------------------------------------------------------------------------------------------------------------------------------------------
  Comparison of functions on the basis of time complexity
  _______________________________________________________

It follows the following order in case of time complexity:

O(nn) > O(n!) > O(n3) > O(n2) > O(n.log(n)) > O(n.log(log(n))) > O(n) > O(sqrt(n)) > O(log(n)) > O(1)

Note: Reverse is the order for better performance of a code with corresponding time complexity, i.e. a program with less time complexity is more
efficient.
  
  SPACE COMPLEXITY - Space complexity of an algorithm quantifies the amount of time taken by a program to run as a function of length of the
                     input. It is directly proportional to the largest memory your program acquires at any instance during run time.

For example: int consumes 4 bytes of memory.
______________________________________________________________________________________________________________________________________________

Q11)
  for( i = 0; i < n; i++ ) {                                    //n
    for( j = 0; j < n; j++ )                                    //n    }nlogn
    a[ j ] = randomValue( i );
    goodSort( a );                                              //nlogn
    }

  TC = O(n2(logn))
  
  
Q12)
  def model_solution(n):
  result = n * (n + 1);
  return result;
  
  TC = O(1) i.e. Constant 
  
Q13)
  int count(int n){
   int c = 0;
   for(int i = n; i > 0; i/= 2)
      for(int j = 0; j < i; j++)
         c += 1;
   return c;}
   
   TC = O(n)
  
Q14)
  int count(int n){
  int c = 0;
  for (int i = 0; i < n; i++)
     for (int j = i; j > 0; j--)
        c = c + 1;
  return c;}
  
  TC = O(n2)
  
Q15)
  for(int i=0;i<n;i++){
    for(int j=0;j<n*n;j++){
	cout<<“tricky!”	<<endl;}}
        
  TC = O(n3)
  
  
  
  
  
  
  
  
    
